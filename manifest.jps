{
    "jpsType": "install",
    "id": "kubernetes",
    "baseUrl": "https://raw.githubusercontent.com/jelastic-jps/kubernetes/dev/addons/",
    "description": {
        "text": "../text/description-kube.md",
        "short": "Jelastic Kubernetes (Beta)"
    },
    "categories": [
        "apps/popular",
        "apps/clusters"
    ],
    "logo": "https://avatars1.githubusercontent.com/u/13629408?s=100",
    "name": "Kubernetes",
    "region": "vz7",
    "targetRegions": {
        "type": "vz7"    
        },
    "settings": {
        "fields": [{
            "type": "spinner",
            "name": "worker",
            "caption": "Worker",
            "min": 1,
            "max": 10,
            "default": 2
        }, {
            "name": "stack",
            "type": "radio-fieldset",
            "values": {
                "clean": "Clean Cluster",
                "deploy": "Deploy Stack YML"
            },
            "default": "clean",
            "showIf": {
                "deploy": {
                    "name": "yml",
                    "type": "string",
                    "caption": "Stack YML URL",
                    "default": "https://raw.githubusercontent.com/jelastic-jps/kubernetes/dev/addons/nginx-pod.yaml",
                    "required": true,
                    "vtype": "url"
                }
            }
        }]
    },
    "nodes": [{
        "count": "1",
        "cloudlets": 32,
        "image": "ihorman/kubernetes:working",
        "nodeGroup": "cp",
        "displayName": "Master",
        "extip": "false",
        "env": {
            "JELASTIC_EXPOSE": false
        }
    }, {
        "count": "${settings.worker}",
        "nodeGroup": "worker",
        "image": "ihorman/kubernetes:working",
        "displayName": "Worker",
        "cloudlets": 32,
        "extip": "true",
        "env": {
            "JELASTIC_EXPOSE": false
        },
        "volumes": ["/var/lib/connect"],
        "volumeMounts": {
            "/var/lib/connect": {
                "readOnly": true,
                "sourcePath": "/var/lib/connect",
                "sourceNodeGroup": "cp"
            }
        }
    }],
    "onInstall": [
        "init-kubernetes",
        "connect-workers",
        "install-components",
        "generate-admin-token"
    ],
    "onAfterScaleOut[worker]":{
        "forEach(event.response.nodes)": [
        "connect-workers"]
    },
    "actions": {
        "init-kubernetes": {
            "cmd[cp]": [
            "systemctl daemon-reload > /dev/null 2>&1",
            "service kubelet restart > /dev/null 2>&1",
            "kubeadm init --config /etc/kubernetes/custom-kubeadm.yaml --ignore-preflight-errors=all",
            "mkdir -p $HOME/.kube",
            "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config",
            "chown root:root $HOME/.kube/config",
            "iptables -I KUBE-FIREWALL -m comment --comment \"kubernetes firewall for dropping marked packets\" -m mark --mark 0x8000/0x8000 -j  ACCEPT",
            "service iptables save",
            "kubeadm token create $(kubeadm token generate) --print-join-command --ttl=0 > /var/lib/connect/settings"
        ]
        },
        "connect-workers": {
            "cmd[worker]": [
            "systemctl daemon-reload > /dev/null 2>&1",
            "service kubelet restart > /dev/null 2>&1",
            "$(cat /var/lib/connect/settings) --ignore-preflight-errors=all > /dev/null 2>&1", "sleep 5",
            "iptables -I KUBE-FIREWALL -m comment --comment \"kubernetes firewall for dropping marked packets\" -m mark --mark 0x8000/0x8000 -j  ACCEPT",
            "service iptables save"
        ]
        },
          "install-components": {
            "cmd[cp]": [
            "kubectl apply -f ${baseUrl}/kubernetes-dashboard.yaml",                
            "kubectl apply -f ${baseUrl}/heapster.yaml",
            "kubectl create -f ${baseUrl}/create-admin.yaml",
            "kubectl apply -f ${baseUrl}/grant-privileges.yaml"
        ],
          "if ('${settings.deploy}'": {
             "cmd[cp]": [
              "kubectl apply -f ${settings.yml}"
        ]        
        }              
        },
          "generate-admin-token": {
            "cmd[cp]":[
            "kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep fulladmin | awk '{print $1}')  | grep 'token:' | sed -e's/token: *//g' > /var/lib/admin-token"
        ]       
        }
    },
    "jpsVersion": "1.1"
}
